use crate::models::chatlog::{parse_think_block, Chatlog, Message};
use sycamore::prelude::*;
use web_sys::KeyboardEvent;

/// Renders a chat message component with different styling for user and AI messages.
///
/// The component displays messages with different positioning and colors depending on whether
/// the message was generated by an AI or a user. User messages appear on the right side with
/// a blue background, while AI messages appear on the left side with a gray background.
#[component(inline_props)]
pub fn ChatMessageComponent(msg: Message) -> View {
    let show_actions = create_signal(false);
    let toggle_actions = move |_| {
        show_actions.set(!show_actions.get());
    };

    let is_editing = create_signal(false);
    let edited_message = create_signal(msg.message.clone());
    let handle_edit_done = move || {
        let new_msg = edited_message.get_clone_untracked();
        if !new_msg.trim().is_empty() {
            let mut active_chatlog = use_context::<Signal<Chatlog>>().get_clone_untracked();
            active_chatlog.update_msg(msg.id, new_msg);
        }
    };

    let handle_delete_msg = move || {
        let confirmed =
            window().confirm_with_message("Are you sure you want to delete this message?");
        if let Ok(is_ok) = confirmed {
            if is_ok {
                let mut active_chatlog = use_context::<Signal<Chatlog>>().get_clone_untracked();
                active_chatlog.remove_message(msg.id);
            }
        }
    };

    let handle_regeneration = move || {
        // the remove operation is 'silent' here because otherwise
        // some behind-the-scenes stuff triggers and a call to
        // `trigger_response_generation()` will cause a crash.
        // Making it use `remove_message_silent()` has the unfortunate
        // side effect of not updating the chatlog view until the
        // new response comes in.
        let active_chatlog = use_context::<Signal<Chatlog>>();
        active_chatlog.update(|log| {
            log.remove_message_silent(msg.id);
        });

        let log = active_chatlog.get_clone();
        log.trigger_response_generation();
    };

    // signal for tracking if think block is expanded, unexpanded by default
    let show_think_block = create_signal(false);
    
    view! {
    div (class = if !msg.ai_generated {
        "message-container-user"
    } else {
        "message-container-ai"
    }) {
        div (class = if !msg.ai_generated {
            "message-bubble-user"
        } else {
            "message-bubble-ai"
        }) {
            // Show text or input based on editing state
            div (class="message-content") {
                (if !is_editing.get() {
                    // Check for think block by setting up a msg clone with the edited content
                    // from the signal
                    let maybe_msg_has_thoughts = parse_think_block(edited_message.get_clone());

                    if let Some((main_content, think_content)) = maybe_msg_has_thoughts.clone() {
                        let markdown_content = ammonia::clean(&markdown::to_html(&main_content));
                        view! {
                            div{
                                div(class="think-block-header", on:click=move |_| {
                                    show_think_block.set(!show_think_block.get());
                                }) {
                                    "Thought Process "
                                    span(class="think-toggle") {
                                        (if show_think_block.get() { "▼" } else { "▶" })
                                    }
                                }
                                div(class=if show_think_block.get() { "think-block-content" } else { "hidden" }) {
                                    (think_content)
                                }

                                div (class="mt-4", dangerously_set_inner_html=markdown_content)
                            }
                        }
                    } else {
                        let markdown_content = ammonia::clean(&markdown::to_html(edited_message.get_clone().as_str()));

                        view! {
                            div(dangerously_set_inner_html=markdown_content)
                        }
                    }
                } else {
                    view! {
                        textarea(
                            rows = "5",
                            class = "message-content-editable block",
                            bind:value = edited_message,
                            on:blur = move |_| {
                                is_editing.set(false);
                                handle_edit_done();
                            },
                            on:keydown = move |e:KeyboardEvent| {
                                if e.key() == "Enter" && !e.shift_key() {
                                    e.prevent_default();
                                    is_editing.set(false);
                                    handle_edit_done();
                                }
                            },
                        )
                    }
                })
            }

            div(class="message-actions") {
                div(
                    class = "action-badge",
                    on:click = toggle_actions
                ) { "~"}
                div(
                    class = if show_actions.get() {
                        "actions-row"
                    } else {
                        "hidden"
                    }
                    ) {
                        button(
                            class="action-button",
                            on:click=move |_| {
                                handle_delete_msg();
                            }
                        ) { "Delete" }
                        button(
                            class="action-button",
                            on:click=move |_| {
                                is_editing.set(!is_editing.get())
                            }
                        ) { "Edit" }
                        button(
                            class="action-button",
                            on:click=move |_| {
                                handle_regeneration();
                            }
                        ) { "Regenerate" }
                    }
                }
            }
        }
    }
}
